{"ast":null,"code":"var _jsxFileName = \"/Users/rijvanmohd/myfranchise/sellerportal/src/context/authContext.js\";\nimport React, { useReducer, useEffect } from \"react\";\n/**\nThis context is used for authentication and seller state management.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet reducer = (info, newInfo) => {\n  if (newInfo === null) {\n    localStorage.removeItem(\"info\");\n    return initialState;\n  }\n\n  return { ...info,\n    ...newInfo\n  };\n};\n\nconst initialState = {\n  seller: {},\n  token: '',\n  isLoggedIn: false\n};\nconst localState = JSON.parse(localStorage.getItem(\"info\"));\nconst InfoContext = /*#__PURE__*/React.createContext();\n\nfunction InfoProvider(props) {\n  const [info, setInfo] = useReducer(reducer, localState || initialState);\n  useEffect(() => {\n    localStorage.setItem(\"info\", JSON.stringify(info));\n  }, [info]);\n  return /*#__PURE__*/_jsxDEV(InfoContext.Provider, {\n    value: {\n      info,\n      setInfo\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\nexport { InfoContext, InfoProvider };","map":{"version":3,"sources":["/Users/rijvanmohd/myfranchise/sellerportal/src/context/authContext.js"],"names":["React","useReducer","useEffect","reducer","info","newInfo","localStorage","removeItem","initialState","seller","token","isLoggedIn","localState","JSON","parse","getItem","InfoContext","createContext","InfoProvider","props","setInfo","setItem","stringify","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA;AACA;AACA;;;;AAEA,IAAIC,OAAO,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC/B,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACA,WAAOC,YAAP;AACD;;AACD,SAAO,EAAE,GAAGJ,IAAL;AAAW,OAAGC;AAAd,GAAP;AACD,CAND;;AAQA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAC,EADY;AAEnBC,EAAAA,KAAK,EAAC,EAFa;AAGnBC,EAAAA,UAAU,EAAC;AAHQ,CAArB;AAMA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWR,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAX,CAAnB;AAEA,MAAMC,WAAW,gBAAGhB,KAAK,CAACiB,aAAN,EAApB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM,CAACf,IAAD,EAAOgB,OAAP,IAAkBnB,UAAU,CAACE,OAAD,EAAUS,UAAU,IAAIJ,YAAxB,CAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,YAAY,CAACe,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACS,SAAL,CAAelB,IAAf,CAA7B;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAF;AAAQgB,MAAAA;AAAR,KAA7B;AAAA,cACGD,KAAK,CAACI;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAED,SAASP,WAAT,EAAsBE,YAAtB","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n\n/**\nThis context is used for authentication and seller state management.\n */\n\nlet reducer = (info, newInfo) => {\n  if (newInfo === null) {\n    localStorage.removeItem(\"info\");\n    return initialState;\n  }\n  return { ...info, ...newInfo };\n};\n\nconst initialState = {\n  seller:{},\n  token:'',\n  isLoggedIn:false\n};\n\nconst localState = JSON.parse(localStorage.getItem(\"info\"));\n\nconst InfoContext = React.createContext();\n\nfunction InfoProvider(props) {\n  const [info, setInfo] = useReducer(reducer, localState || initialState);\n\n  useEffect(() => {\n    localStorage.setItem(\"info\", JSON.stringify(info));\n  }, [info]);\n\n  return (\n    <InfoContext.Provider value={{ info, setInfo }}>\n      {props.children}\n    </InfoContext.Provider>\n  );\n}\n\nexport { InfoContext, InfoProvider };\n"]},"metadata":{},"sourceType":"module"}